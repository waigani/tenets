tenets:
  - name: freed-new-object
    doc: Finds objects that were created with new and freed.
    bots:
      codelingo/clair:
        comment: This was created with new, and should be deleted not freed.
    query: |
      import codelingo/ast/cpp/0.0.0

      cpp.block:
        cpp.assignment_statement({depth: any}):
          cpp.lhs:
            cpp.variable:
              cpp.identifier_name:
                identifier_token: $varName
          cpp.rhs:
            cpp.new_keyword
        @ clair.comment
        cpp.free_statement:
          cpp.variable:
            cpp.identifier_name:
              identifier_token: $varName

  - name: deleted-malloced-objects
    doc: Finds objects that were obtained with malloc and deleted.
    bots:
      codelingo/clair:
        comment: This was obtained with malloc, and should be freed not deleted.
    query: |
      import codelingo/ast/cpp/0.0.0

      cpp.block:
        cpp.assignment_statement({depth: any}):
          cpp.lhs:
            cpp.variable:
              cpp.identifier_name:
                identifier_token: $varName
          cpp.rhs:
            cpp.function_call:
              cpp.identifier_name:
                identifier_token: "malloc"
        cpp.delete_statement:
          @ clair.comment
          cpp.variable:
            cpp.identifier_name:
              identifier_token: $varName

  - name: used-after-deletion
    doc: Finds objects used after deletion.
    bots:
      codelingo/clair:
        comment: This object has already been deleted.
    query: |
      import codelingo/ast/cpp/0.0.0

      cpp.delete_statement:
        cpp.variable:
          cpp.identifier_name:
            identifier_token: $varName
      or:
        cpp.element:
          cpp.variable({depth: any}):
              cpp.identifier_name:
                identifier_token: $varName
        cpp.variable:
          cpp.identifier_name:
            identifier_token: $varName

  - name: undeleted-returned-object
    doc: Finds objects new that are not deleted.
    bots:
      codelingo/clair:
        comment: This object is neither deleted nor passed to a method that could delete it.
    query: |
      import codelingo/ast/cpp/0.0.0

      cpp.method_declaration({depth: any}):
        cpp.assignment_statement({depth: any}):
          cpp.lhs:
            cpp.variable:
              type: /ref.*/
              cpp.identifier_name:
                identifier_token: $varName
        !or:
          cpp.delete_statement({depth: any}):
            cpp.variable:
              cpp.identifier_name:
                identifier_token: $varName
          cpp.method_call:
            cpp.variable:
              cpp.identifier_name:
                identifier_token: $varName
          cpp.function_call:
            cpp.variable:
              cpp.identifier_name:
                identifier_token: $varName