lexicons:
	codelingo/java
	codelingo/common as _
  codelingo/regex as r
  codelingo/sets as s
tenets:

# For each class that is a Domain Entity (identified by package and type
# annotation), verify that there is a Conversion class (identified by package
# and signature) that converts between that Domain Entity and a Data Entity.
  - name: hibernater-check
    doc: "all domain entities in package ourdomain must be hibernatable"
    comment: "Could not find any hibernate methods for this domain class..."
    match:
      package: "ourdomain"
        java.class:
          has_annotation: "javax.persistence.Entity"
          type: c
        java.class:
          !has_annotation: "javax.persistence.Entity"
          method:
            arg:
              type: $c

# Given a class matches some indicator that it is a Factory class (naming,
# package, common substring to an entity type), indicate a violation if it
# does not expose at least one method that returns the entity type
  - name: factory-must-return-concrete
    doc: "all factory classes must contain at least one public method to return the produced type"
    comment: "This factory class does not appear to ever return the produced type..."
    match:
      class:
        name: 
          string: n
          r.match:
            pattern: /^(.*)Factory$/
            string: $n
            group: a[]
        method:
          or:
            java.access: public
            java.access: protected
          return:
            any:
              type: $a[1].string

# Let's say we were mad enough to actually be depending on persistent
# serialisation in Java.  For a class that we plan to persist (let's say a
# marker interface, package, naming or some other simple mechanism) verify that
# the serialVersionId has changed if there is any change to the declaration of
# non-transient fields in the class between this and the previously committed
# version.
  - name: check-serialization-id-correctly-updated
    doc: "changes to the non-transient fields of a serializable class must also result in a change to the serialization id"
    comment: "This serializable class has changed but the serialization id hasn't. Please update it..."
    match:
      package:
          name: p
          class:
            name: c
            implements: "java.io.Serializable"
            field:
              name: "serialVersionUID"
              initialvalue: uid
            field:
              !java.modifier: transient 
              type: t[]
              name: n[]
      git.previous:
        package:
          name: $p
          class:
            name: $c
            field:
              name: "serialVersionUID"
              initialvalue: $uid
            field:
              or:
                !type: all $t
                !name: all $n


#For an enum annotated as having a field representing bit-flags. Verify that
#all static final fields with a name ending in _MASK are of the same flag-
#field type and that there is one such field called ALL_MASK
  - name: enum-bit-field-constitency-check
    doc: "Enums which represent bitfields must follow _MASK naming convention and have an ALL_MASK field"
    comment: "This bit-field enum is defined incorrectly. Please end all fields in _MASK and ensure there is an ALL_MASK field"
    match:
      java.enum:
        java.has_annotation: "mypkg.BitMask"
        or:
          field:
            java.modifier: final
            java.modifier: static
            !name: /^.*_MASK$/
          field:
            !name: "ALL_MASK"
